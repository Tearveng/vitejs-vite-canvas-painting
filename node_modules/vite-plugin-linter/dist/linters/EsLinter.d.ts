import { ESLint } from "eslint";
import { ConfigEnv } from "vite";
import Linter, { LinterResult } from "../Linter";
export interface EsLinterOptions {
    /**
     * Options used when called via the build command.
     * Defaults: cache: false, fix: false
     */
    buildOptions?: EsLintOptions;
    /**
     * The current Vite configuration environment
     */
    configEnv: ConfigEnv;
    /**
     * Options used when called via the serve command.
     * Defaults: cache: true, cacheLocation: "./node_modules/.cache/.eslintcache", fix: false
     */
    serveOptions?: EsLintOptions;
}
export interface EsLintOptions extends ESLint.Options {
    /**
     * If the cache file should be removed before each start
     */
    clearCacheOnStart?: boolean;
    /**
     * Output formatter. Default is stylish
     */
    formatter?: string | ESLint.Formatter;
}
export default class EsLinter implements Linter<ESLint.LintResult> {
    readonly name = "EsLinter";
    private readonly eslint;
    private formatter;
    private readonly options;
    constructor(options?: EsLinterOptions);
    format(results: ESLint.LintResult[]): Promise<string>;
    lintBuild(files: string[]): Promise<ESLint.LintResult[]>;
    lintServe(files: string[], output: (result: LinterResult<ESLint.LintResult>) => void): Promise<void>;
    private lint;
    private loadFormatter;
}
