"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const eslint_1 = require("eslint");
const fs_1 = __importDefault(require("fs"));
const utils_1 = require("../utils");
const defaultBuildOptions = {
    cache: false,
    fix: false,
};
const defaultServeOptions = {
    cache: true,
    cacheLocation: "./node_modules/.cache/.eslintcache",
    fix: false,
};
class EsLinter {
    constructor(options) {
        var _a;
        this.name = "EsLinter";
        this.formatter = null;
        if ((options === null || options === void 0 ? void 0 : options.configEnv.command) === "build") {
            this.options = Object.assign(Object.assign({}, defaultBuildOptions), options.buildOptions);
        }
        else {
            this.options = Object.assign(Object.assign({}, defaultServeOptions), options === null || options === void 0 ? void 0 : options.serveOptions);
        }
        const _b = this.options, { clearCacheOnStart, formatter } = _b, esLintOptions = __rest(_b, ["clearCacheOnStart", "formatter"]);
        this.eslint = new eslint_1.ESLint(esLintOptions);
        if (clearCacheOnStart) {
            const cachePath = (_a = this.options.cacheLocation) !== null && _a !== void 0 ? _a : ".eslintcache";
            if (fs_1.default.existsSync(cachePath)) {
                fs_1.default.unlinkSync(cachePath);
            }
        }
    }
    async format(results) {
        if (!this.formatter) {
            await this.loadFormatter();
        }
        return this.formatter.format(results);
    }
    async lintBuild(files) {
        return await this.lint(files);
    }
    async lintServe(files, output) {
        const reports = await this.lint(files);
        const result = {};
        for (const report of reports) {
            if (report.errorCount > 0 || report.warningCount > 0) {
                result[(0, utils_1.normalizePath)(report.filePath)] = report;
            }
        }
        output(result);
    }
    async lint(files) {
        const lintFiles = [];
        for (const file of files) {
            if (!(await this.eslint.isPathIgnored(file))) {
                lintFiles.push(file);
            }
        }
        const reports = await this.eslint.lintFiles(lintFiles);
        if (this.options.fix && reports) {
            eslint_1.ESLint.outputFixes(reports);
        }
        return reports;
    }
    async loadFormatter() {
        switch (typeof this.options.formatter) {
            case "string":
                this.formatter = await this.eslint.loadFormatter(this.options.formatter);
                break;
            case "function":
                this.formatter = this.options.formatter;
                break;
            default:
                this.formatter = await this.eslint.loadFormatter("stylish");
        }
    }
}
exports.default = EsLinter;
