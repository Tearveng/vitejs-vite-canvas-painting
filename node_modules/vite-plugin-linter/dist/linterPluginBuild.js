"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildPluginName = void 0;
const lintWorkerThread_1 = require("./lintWorkerThread");
const utils_1 = require("./utils");
exports.buildPluginName = "vite-plugin-linter-build";
function linterPluginBuild(options = {}, fileFilter) {
    var _a, _b;
    const includeMode = (_b = (_a = options.build) === null || _a === void 0 ? void 0 : _a.includeMode) !== null && _b !== void 0 ? _b : "processedFiles";
    const transformedFiles = [];
    function getLintFiles(folder) {
        return (0, utils_1.readAllFiles)(folder, fileFilter).map((f) => (0, utils_1.normalizePath)(f));
    }
    return {
        apply: "build",
        enforce: "pre",
        name: exports.buildPluginName,
        async buildEnd() {
            let files;
            if (includeMode === "filesInFolder") {
                files = getLintFiles(process.cwd());
            }
            else {
                files = transformedFiles;
            }
            const workersByLinterName = (0, lintWorkerThread_1.createWorkerThreads)("build", exports.buildPluginName, options.linters);
            const lintTasks = [];
            for (const linterName of Object.keys(workersByLinterName)) {
                lintTasks.push(new Promise((resolve) => {
                    const worker = workersByLinterName[linterName];
                    worker.on("message", async (message) => {
                        const linter = options.linters.find((l) => l.name === message.linterName);
                        resolve(await linter.format(message.result.build));
                        worker.terminate();
                    });
                    worker.postMessage(files);
                }));
            }
            const results = (await Promise.all(lintTasks)).filter((r) => r);
            for (const result of results) {
                this.warn(result);
            }
            if (results.length > 0) {
                this.error("Linting failed, see above output");
            }
        },
        getLinter(name) {
            return options.linters.find((l) => l.name === name);
        },
        async lintFolder(folder) {
            const files = getLintFiles(folder);
            const outputLines = [];
            for (const linter of options.linters) {
                const result = await linter.lintBuild(files);
                const output = await linter.format(result);
                if (output) {
                    outputLines.push(output);
                }
            }
            return outputLines;
        },
        transform(code, id) {
            if (!fileFilter(id) || includeMode === "filesInFolder") {
                return null;
            }
            transformedFiles.push((0, utils_1.normalizePath)(id));
            return null;
        },
    };
}
exports.default = linterPluginBuild;
